import { DelayHandler } from './delay-handler';
import { MockApiService } from './mock-api.service';
/**
 * 模拟拦截器.
 */
export class MockApiInterceptor {
    /**
     * 启动时注册API
     * @param mockApis 模拟API
     * @param config 配置信息
     */
    static forRoot(mockApis, config) {
        const mockApiService = MockApiService.getMockApiService(new DelayHandler());
        mockApiService.registerMockApis(mockApis);
        MockApiInterceptor.mockApiService = mockApiService;
        MockApiInterceptor.config = config ? config : {};
        return MockApiInterceptor;
    }
    intercept(req, next) {
        if (MockApiInterceptor.config && typeof MockApiInterceptor.config.filter === 'function') {
            try {
                if (!MockApiInterceptor.config.filter(req)) {
                    return next.handle(req);
                }
            }
            catch (e) {
                console.warn("在调用过滤器时发生异常", e);
            }
        }
        return MockApiInterceptor.mockApiService.request(req);
    }
}
/**
 * 此静态变量应该变到构造函数中初始化.
 * 区别：
 * 1. 属性初始化：其它文件import本文件时执行
 * 2. 构造函数：实例化时执行
 */
MockApiInterceptor.mockApiService = null;
/**
 * 配置信息
 */
MockApiInterceptor.config = {};
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibW9jay1hcGkuaW50ZXJjZXB0b3IuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi8uLi8uLi9wcm9qZWN0cy9tb2NrLWFwaS9zcmMvbGliL21vY2stYXBpLmludGVyY2VwdG9yLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUVBLE9BQU8sRUFBQyxZQUFZLEVBQUMsTUFBTSxpQkFBaUIsQ0FBQztBQUM3QyxPQUFPLEVBQUMsY0FBYyxFQUFDLE1BQU0sb0JBQW9CLENBQUM7QUFJbEQ7O0dBRUc7QUFDSCxNQUFNLE9BQU8sa0JBQWtCO0lBYzdCOzs7O09BSUc7SUFDSCxNQUFNLENBQUMsT0FBTyxDQUFDLFFBQWtDLEVBQUUsTUFBc0Q7UUFDdkcsTUFBTSxjQUFjLEdBQUcsY0FBYyxDQUFDLGlCQUFpQixDQUNyRCxJQUFJLFlBQVksRUFBRSxDQUNuQixDQUFDO1FBRUYsY0FBYyxDQUFDLGdCQUFnQixDQUFDLFFBQVEsQ0FBQyxDQUFDO1FBQzFDLGtCQUFrQixDQUFDLGNBQWMsR0FBRyxjQUFjLENBQUM7UUFDbkQsa0JBQWtCLENBQUMsTUFBTSxHQUFHLE1BQU0sQ0FBQyxDQUFDLENBQUMsTUFBTSxDQUFDLENBQUMsQ0FBQyxFQUFFLENBQUM7UUFDakQsT0FBTyxrQkFBa0IsQ0FBQztJQUM1QixDQUFDO0lBRUQsU0FBUyxDQUFDLEdBQXFCLEVBQUUsSUFBaUI7UUFDaEQsSUFBSSxrQkFBa0IsQ0FBQyxNQUFNLElBQUksT0FBTyxrQkFBa0IsQ0FBQyxNQUFNLENBQUMsTUFBTSxLQUFLLFVBQVUsRUFBRTtZQUN2RixJQUFJO2dCQUNGLElBQUksQ0FBQyxrQkFBa0IsQ0FBQyxNQUFNLENBQUMsTUFBTSxDQUFDLEdBQUcsQ0FBQyxFQUFFO29CQUMxQyxPQUFPLElBQUksQ0FBQyxNQUFNLENBQUMsR0FBRyxDQUFDLENBQUM7aUJBQ3pCO2FBQ0Y7WUFBQyxPQUFPLENBQUMsRUFBRTtnQkFDVixPQUFPLENBQUMsSUFBSSxDQUFDLGFBQWEsRUFBRSxDQUFDLENBQUMsQ0FBQzthQUNoQztTQUNGO1FBQ0QsT0FBTyxrQkFBa0IsQ0FBQyxjQUFjLENBQUMsT0FBTyxDQUFtQixHQUFHLENBQUMsQ0FBQztJQUMxRSxDQUFDOztBQXhDRDs7Ozs7R0FLRztBQUNZLGlDQUFjLEdBQUcsSUFBc0IsQ0FBQztBQUV2RDs7R0FFRztBQUNZLHlCQUFNLEdBQUcsRUFBbUQsQ0FBQyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7SHR0cEV2ZW50LCBIdHRwSGFuZGxlciwgSHR0cEludGVyY2VwdG9yLCBIdHRwUmVxdWVzdH0gZnJvbSAnQGFuZ3VsYXIvY29tbW9uL2h0dHAnO1xuaW1wb3J0IHtPYnNlcnZhYmxlfSBmcm9tICdyeGpzJztcbmltcG9ydCB7RGVsYXlIYW5kbGVyfSBmcm9tICcuL2RlbGF5LWhhbmRsZXInO1xuaW1wb3J0IHtNb2NrQXBpU2VydmljZX0gZnJvbSAnLi9tb2NrLWFwaS5zZXJ2aWNlJztcbmltcG9ydCB7VHlwZX0gZnJvbSAnQGFuZ3VsYXIvY29yZSc7XG5pbXBvcnQge01vY2tBcGlJbnRlcmZhY2V9IGZyb20gJy4vbW9jay1hcGkuaW50ZXJmYWNlJztcblxuLyoqXG4gKiDmqKHmi5/mi6bmiKrlmaguXG4gKi9cbmV4cG9ydCBjbGFzcyBNb2NrQXBpSW50ZXJjZXB0b3IgaW1wbGVtZW50cyBIdHRwSW50ZXJjZXB0b3Ige1xuICAvKipcbiAgICog5q2k6Z2Z5oCB5Y+Y6YeP5bqU6K+l5Y+Y5Yiw5p6E6YCg5Ye95pWw5Lit5Yid5aeL5YyWLlxuICAgKiDljLrliKvvvJpcbiAgICogMS4g5bGe5oCn5Yid5aeL5YyW77ya5YW25a6D5paH5Lu2aW1wb3J05pys5paH5Lu25pe25omn6KGMXG4gICAqIDIuIOaehOmAoOWHveaVsO+8muWunuS+i+WMluaXtuaJp+ihjFxuICAgKi9cbiAgcHJpdmF0ZSBzdGF0aWMgbW9ja0FwaVNlcnZpY2UgPSBudWxsIGFzIE1vY2tBcGlTZXJ2aWNlO1xuXG4gIC8qKlxuICAgKiDphY3nva7kv6Hmga9cbiAgICovXG4gIHByaXZhdGUgc3RhdGljIGNvbmZpZyA9IHt9IGFzIHtmaWx0ZXI/OiAocmVxOiBIdHRwUmVxdWVzdDxhbnk+KSA9PiBib29sZWFufTtcblxuICAvKipcbiAgICog5ZCv5Yqo5pe25rOo5YaMQVBJXG4gICAqIEBwYXJhbSBtb2NrQXBpcyDmqKHmi59BUElcbiAgICogQHBhcmFtIGNvbmZpZyDphY3nva7kv6Hmga9cbiAgICovXG4gIHN0YXRpYyBmb3JSb290KG1vY2tBcGlzOiBUeXBlPE1vY2tBcGlJbnRlcmZhY2U+W10sIGNvbmZpZz86IHtmaWx0ZXI/OiAocmVxOiBIdHRwUmVxdWVzdDxhbnk+KSA9PiBib29sZWFufSk6IFR5cGU8SHR0cEludGVyY2VwdG9yPiB7XG4gICAgY29uc3QgbW9ja0FwaVNlcnZpY2UgPSBNb2NrQXBpU2VydmljZS5nZXRNb2NrQXBpU2VydmljZShcbiAgICAgIG5ldyBEZWxheUhhbmRsZXIoKVxuICAgICk7XG5cbiAgICBtb2NrQXBpU2VydmljZS5yZWdpc3Rlck1vY2tBcGlzKG1vY2tBcGlzKTtcbiAgICBNb2NrQXBpSW50ZXJjZXB0b3IubW9ja0FwaVNlcnZpY2UgPSBtb2NrQXBpU2VydmljZTtcbiAgICBNb2NrQXBpSW50ZXJjZXB0b3IuY29uZmlnID0gY29uZmlnID8gY29uZmlnIDoge307XG4gICAgcmV0dXJuIE1vY2tBcGlJbnRlcmNlcHRvcjtcbiAgfVxuXG4gIGludGVyY2VwdChyZXE6IEh0dHBSZXF1ZXN0PGFueT4sIG5leHQ6IEh0dHBIYW5kbGVyKTogT2JzZXJ2YWJsZTxIdHRwRXZlbnQ8YW55Pj4ge1xuICAgIGlmIChNb2NrQXBpSW50ZXJjZXB0b3IuY29uZmlnICYmIHR5cGVvZiBNb2NrQXBpSW50ZXJjZXB0b3IuY29uZmlnLmZpbHRlciA9PT0gJ2Z1bmN0aW9uJykge1xuICAgICAgdHJ5IHtcbiAgICAgICAgaWYgKCFNb2NrQXBpSW50ZXJjZXB0b3IuY29uZmlnLmZpbHRlcihyZXEpKSB7XG4gICAgICAgICAgcmV0dXJuIG5leHQuaGFuZGxlKHJlcSk7XG4gICAgICAgIH1cbiAgICAgIH0gY2F0Y2ggKGUpIHtcbiAgICAgICAgY29uc29sZS53YXJuKFwi5Zyo6LCD55So6L+H5ruk5Zmo5pe25Y+R55Sf5byC5bi4XCIsIGUpO1xuICAgICAgfVxuICAgIH1cbiAgICByZXR1cm4gTW9ja0FwaUludGVyY2VwdG9yLm1vY2tBcGlTZXJ2aWNlLnJlcXVlc3Q8SHR0cFJlcXVlc3Q8YW55Pj4ocmVxKTtcbiAgfVxufVxuIl19